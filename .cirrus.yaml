env:
  ARTIFACTORY_URL: VAULT[development/kv/data/repox data.url]
  ARTIFACTORY_PRIVATE_USERNAME: vault-${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-private-reader
  ARTIFACTORY_PRIVATE_PASSWORD: VAULT[development/artifactory/token/${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-private-reader access_token]
  ARTIFACTORY_DEPLOY_USERNAME: vault-${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-qa-deployer
  ARTIFACTORY_DEPLOY_PASSWORD: VAULT[development/artifactory/token/${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-qa-deployer access_token]
  ARTIFACTORY_DEPLOY_REPO: sonarsource-public-qa
  ARTIFACTORY_ACCESS_TOKEN: VAULT[development/artifactory/token/${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-private-reader access_token]
  # Use bash (instead of sh on linux or cmd.exe on windows)
  CIRRUS_SHELL: bash
  # Allows to run builds for the 50 last commits in a branch:
  CIRRUS_CLONE_DEPTH: 50
  SIGN_KEY: VAULT[development/team/sonarlint/kv/data/sign-key data.key_pgp]
  SIGN_PASSPHRASE: VAULT[development/team/sonarlint/kv/data/sign-key data.passphrase]
  # analysis on next
  SONAR_TOKEN: VAULT[development/kv/data/next data.token]
  SONAR_HOST_URL: https://next.sonarqube.com/sonarqube
  WS_APIKEY: VAULT[development/kv/data/mend data.apikey]
  WS_WSS_URL: VAULT[development/kv/data/mend data.url]
  WS_USERKEY: VAULT[development/kv/data/mend data.userKey]
  SONARSOURCE_SNK: VAULT[development/team/languages/kv/data/strong_named_key data.SonarSourceSecret_snk]
  SONARSOURCE_SNK_PATH: ${CIRRUS_WORKING_DIR}/SonarSource.snk

only_sonarsource_qa: &ONLY_SONARSOURCE_QA
  only_if: $CIRRUS_USER_COLLABORATOR == 'true' && $CIRRUS_TAG == "" && ($CIRRUS_PR != "" || $CIRRUS_BRANCH == "master" || $CIRRUS_BRANCH =~ "branch-.*" || $CIRRUS_BRANCH =~ "dogfood-on-.*")

build_dotnet_task:
  eks_container:
    cluster_name: ${CIRRUS_CLUSTER_NAME}
    region: eu-central-1
    dockerfile: .cirrus/Dockerfile
    builder_role: cirrus-builder
    builder_image: docker-builder-v*
    builder_instance_type: t3.small
    docker_arguments:
      CIRRUS_AWS_ACCOUNT: ${CIRRUS_AWS_ACCOUNT}
    cpu: 4
    memory: 4G
  env:
    ARTIFACTORY_USER: ${ARTIFACTORY_PRIVATE_USERNAME}
    ARTIFACTORY_PASSWORD: ${ARTIFACTORY_PRIVATE_PASSWORD}
    PATH: ${PATH}:${HOME}/.dotnet/tools
  snk_file:
    path: ${SONARSOURCE_SNK_PATH}
    variable_name: SONARSOURCE_SNK
  compute_project_version_script: |
    source cirrus-env BUILD

    # Read the version from the root pom
    sonarProjectVersion=$(maven_expression "project.version" | sed 's/-SNAPSHOT//')
    echo "Sonar project version is '${sonarProjectVersion}'"

    # Set the variable so it can be used by other tasks
    echo "SONAR_PROJECT_VERSION=${sonarProjectVersion}" >> $CIRRUS_ENV
  dotnet_restore_script: |
    # Restore the .NET project using Repox as source feed
    dotnet restore omnisharp-dotnet/SonarLint.OmniSharp.DotNet.Services.sln \
      --locked-mode \
      --configfile omnisharp-dotnet/nuget.config
  prepare_sonarqube_analysis_script: |
    # TODO Handle differences between master and PR analysis
    dotnet sonarscanner begin \
      -d:sonar.token=${SONAR_TOKEN} \
      -d:sonar.host.url=${SONAR_HOST_URL} \
      -d:sonar.scanner.javaExePath=/opt/java/openjdk/bin/java \
      -k:"sonarlint-omnisharp-dotnet" \
      -v:${SONAR_PROJECT_VERSION} \
      -d:sonar.cs.opencover.reportsPaths="${CIRRUS_WORKING_DIR}/**/TestResults/coverage.**.xml"
  download_omnisharp_script: |
    # Get OmniSharp fork from Repox
    mvn generate-resources -B -Denable-repo=qa -DskipIts -Pdownload-omnisharp-for-building
  build_dotnet_script: |
    # Build and run .NET unit tests
    dotnet test omnisharp-dotnet/SonarLint.OmniSharp.DotNet.Services.sln \
      -p:SignAssembly=true -p:AssemblyOriginatorKeyFile="${SONARSOURCE_SNK_PATH}" \
      -p:CollectCoverage=true -p:CoverletOutput=TestResults/ -p:CoverletOutputFormat=opencover \
      --no-restore
